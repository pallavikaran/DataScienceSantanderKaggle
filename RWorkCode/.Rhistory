dataset <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/dataset.csv")
View(dataset)
names(dataset)
summary(dataset)
library(rattle)
rattle()
library(e1071)
library(MASS)
library(rpart)
library(caret)
index<-1:nrow(dataset)
testindex<-sample(index,trunc(length(index)*.0.3))
testindex<-sample(index,trunc(length(index)*0.3))
set.seed(42)
testindex<-sample(index,trunc(length(index)*0.3))
testindex<-sample(index,trunc(length(index)*0.3))
set.seed(42)
testindex<-sample(index,trunc(length(index)*0.3))
testset<-dataset[testindex,]
trainset<-dataset[-testindex,]
attach(ddataset)
attach(dataset)
fit<-rpart(Bankrupt~.,method="class",data=dataset,ccontrol = rpart.control(minsplit = 1))
fit<-rpart(Bankrupt~.,method="class",data=dataset,control = rpart.control(minsplit = 1))
printcp(fit)
fancyRpartPlot(fit,main="Decision Tree Before Pruning")
names(dataset)
printcp(fit)
library(rattle)
rattlr()
rattle()
library(e1071)
library(rpart)
library(MASS)
printcp(fit)
library(caret)
prediction<-predict(fit,testset[,-1],type="class")
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
printcp(fit)
pfit<-prune(fit,cp=0.014778)
prediction<-predict(pfit,testset[,-1],type="class")
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
printcp(fit)
pfit<-prune(fit,cp=0.019704)
prediction<-predict(pfit,testset[,-1],type="class")
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
printcp(pfit)
fancyRpartPlot(pfit,main="Decision Tree After Pruning")
pfit<-prune(fit,cp=0.019700)
prediction<-predict(pfit,testset[,-1],type="class")
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
fancyRpartPlot(pfit,main="Decision Tree After Pruning")
printcp(pfit)
printcp(fit)
pfit<-prune(fit,cp=0.02)
printcp(pfit)
prediction<-predict(pfit,testset[,-1],type="class")
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
printcp(fit)
pfit<-prune(fit,cp=0.019704)
printcp(pfit)
printcp(fit)
prediction<-predict(pfit,testset[,-1],type="class")
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
fancyRpartPlot(pfit,main="Decision Tree After Pruning")
library(rattle)
rattle()
library(MASS)
library(e1071)
library(caret)
attach(dataset)
tuned<-tune.svm(Bankrupt~.data=trainset,gamma=10(^-6:-1),cost=10^(-1:1))
tuned<-tune.svm(Bankrupt~.,data=trainset,gamma=10(^-6:-1),cost=10^(-1:1))
tuned<-tune.svm(Bankrupt~.,data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
summary(tuned)
tuned<-tune.svm(Bankrupt~.,data=trainset,gamma=10^(-6:-1),cost=10^(-1:0.5))
summary(tuned)
tuned<-tune.svm(Bankrupt~.,data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
summary(tuned)
model<-svm(Bankrupt~.,data=trainset,kernal="radial",gamma=0.01,cost=1.0)
summary(model)
model<-svm(Class~.,data=trainset,kernal="radial",gamma=0.01,cost=1.0)
model<-svm(Bankrupt~.,data=trainset,kernal="radial",gamma=0.01,cost=1.0)
summary(model)
prediction<-predict(model,testset[,-1])
tab<-table(pred=prediction,actual=test[,1])
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
tab
dataset <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/dataset.csv")
View(dataset)
attach(dataset)
tuned
library(rattle)
rattle()
library(rpart)
library(MASS)
library(e1071)
library(caret)
summary(tuned)
summary(model)
model<-svm(Bankrupt~.,data=trainset)
model<-svm(Bankrupt~.,data=trainset,kernel="radial",gamma=0.01,cost=1)
summary(model)
prediction<-predict(model,testset[,-1])
tab<-table(pred=prediction,actual=testset[,1])
tab
confusionMatrix(tab)
set.seed(42)
tuned<-tune.svm(Bankrupt~.,data=trainset,gamma=10^(-6:-1),cost=10^(-1:1))
summary(tuned)
model<-svm(Bankrupt~.,data=trainset,kernel="radial",gamma=0.010000,cost=1.0)
summary(model)
model<-svm(Bankrupt~.,data=trainset,kernel="radial",gamma=0.010000,cost=1.0,type="class")
model<-svm(Bankrupt~.,data=trainset,kernel="radial",gamma=0.010000,cost=1.0,method="class")
summary(model)
prediction<-predict(model,testset[,-1])
tab<-table(pred=prediction,actual=testset[,1])
tab
prediction<-predict(model,testset[,-1],decision.values = FALSE)
tab<-table(pred=prediction,actual=testset[,1])
tab
prediction<-predict(model,testset[,-1],decision.values = TRUE)
tab<-table(pred=prediction,actual=testset[,1])
tab
model<-svm(Bankrupt~.,data=trainset,kernel="radial",gamma=0.010000,cost=1.0,type="C-classification")
summary(model)
prediction<-predict(model,testset[,-1])
tab<-table(pred=prediction,actual=testset[,1])
confusionMatrix(tab)
install.packages("rocr")
yes
y
install.packages("ROCR")
logitmodel<-glm(Bankrupt~.,data=trainset,family="binomial")
Rdataset <- read.csv("D:/DataScience/Presentation/Bankruptcy/Regression Dataset.csv")
View(Rdataset)
atttach(Rdataset)
attach(Rdataset)
Rtestset<-Rdataset[testindex,]
Rtrainset<-Rdataset[-testindex,]
logitmodel<-glm(Bankrupt~.,data=Rtrainset,family="binomial")
summary(logitmodel)
names(Rdataset)
Rdataset <- read.csv("D:/DataScience/Presentation/Bankruptcy/Regression Dataset.csv")
View(Rdataset)
Rtestset<-Rdataset[testindex,]
Rtrainset<-Rdataset[-testindex,]
logitmodel<-glm(Bankrupt~.,data=Rtrainset,family="binomial")
set.seed(42)
Rindex<-1:nrow(Rdataset)
set.seed(42)
Rtestindex<-sample(Rindex,trunc(length(Rindex)*0.3))
Rtestset<-Rdataset[Rtestindex,]
Rtrainset<-Rdataset[-Rtestindex,]
logitmodel<-glm(Bankrupt~.,data=Rtrainset,family="binomial")
summary(logitmodel)
logitmodel<-glm(formula=Bankrupt.~,data=Rtrainset,family="binomial(link=logit)")
logitmodel<-glm(formula=Bankrupt~.,data=Rtrainset,family="binomial(link=logit)")
logitmodel<-glm(formula=Bankrupt~.,data=Rtrainset,family=binomial(link="logit"))
summary(logitmodel)
Rdataset <- read.csv("D:/DataScience/Presentation/Bankruptcy/Regression Dataset.csv")
View(Rdataset)
set.seed(42)
Rindex<-1:nrow(Rdataset)
Rtestindex<-sample(Rindex,trunc(length(Rindex)*0.3))
Rtestset<-Rdataset[Rtestindex,]
Rtrainset<-Rdataset[-Rtestindex,]
logitmodel<-glm(formula=Bankrupt~.,data=Rtrainset,family=binomial(link="logit"))
summary(logitmodel)
prediction<-predict(logitmodel,Rtestset[,-1])
tab<-table(pred=prediction,actual=Rtestset[,1])
confusionMatrix(tab)
tab
anova(logitmodel)
confusionMatrix(tab,type="prob")
prediction<-predict(logitmodel,Rtestset[,-1],type="response")
tab<-table(pred=prediction,actual=Rtestset[,1])
tab
qchisq(0.95,270)
plot(Bankrupt,fitted.values(logitmodel))
plot(Bankrupt,fitted.values(logitmodel),data=Rtrainset)
prediction
tab2 <- function(Rtrainset, logitmodel) {
prediction <- ifelse(predict(logitmodel, Rtestset[,-1], type='response') > 0.5, TRUE, FALSE)
confusion  <- table(prediction, Rtestset[,1])
confusion  <- cbind(confusion, c(1 - confusion[1,1]/(confusion[1,1]+confusion[2,1]), 1 - confusion[2,2]/(confusion[2,2]+confusion[1,2])))
confusion  <- as.data.frame(confusion)
names(confusion) <- c('FALSE', 'TRUE', 'class.error')
confusion
}
tab2
prediction<-predict(logitmodel,Rtestset[,-1],type="response")
tab<-table(pred=prediction,actual=Rtestset[,1])
tab
rattle()
library(rattle)
rattle(0)
rattle()
attach(dataset)
attach(Rdataset)
summary(logitmodel)
annova(logitmodel)
library(MASS)
library(e1071)
annova(logitmodel)
anova(logitmodel)
warnings()
prediction<predict(logitmodel,Rdataset,type="prob")
prediction<-predict(logitmodel,Rdataset,type="prob")
prediction
prediction<-predict(logitmodel,Rtrainset)
tab<-pred(prediction,actual=Rtestset
)
tab<-table(pred=prediction,actual=Rtestset)
prediction<-predict(logitmodel,Rtrainset[,1])
prediction<-predict(logitmodel,Rtrainset[,-1])
tab<-table(predcit=prediction,actual=Rtrainset)
tab<-table(predcit=prediction,actual=Rtrainset[,1])
tab
prediction<-predict(logitmodel,Rtrainset[,-1],type="response")
tab<-table(predcit=prediction,actual=Rtrainset[,1])
tab
prediction<-predict(logitmodel,Rtestset[,-1],type="response")
tab<-table(predcit=prediction,actual=Rtestset[,1])
tab
tab<-table(prediction> 0.5, "1", "0",actual=Rtestset[,1])
tab<-table((prediction= "1", "0"),actual=Rtestset[,1])
tab<-table((prediction> 0.5, "1", "0"),actual=Rtestset[,1])
tab<-table(pred=(prediction> 0.5, "1", "0"),actual=Rtestset[,1])
prediction<-predict(logitmodel,newdata=Rtestset[,-1],type="response")
tab<-table(predcit=prediction,actual=Rtestset[,1])
tab
prediction1<-as.vector(ifelse(predict(logitmodel, type="response", newdata=Rtestset[,-1]) > 0.5, "1", "0"))
tab1<-table(pred=prediction,actual=Rtestset[,1])
tab1
tab1<-table(crs$Rdataset[crs$test, c(crs$input, crs$target)]$Bankrupt, prediction,
dnn=c("Actual", "Predicted"))
tab1<-table(Rtestset[,1], prediction,
dnn=c("Actual", "Predicted"))
tab1
perf <- performance(prediction, measure = "tpr", x.measure = "fpr")
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
perf <- performance(prediction1, measure = "tpr", x.measure = "fpr")
perf <- performance(prediction1)
pe <- performance(prediction, "tpr", "fpr")
library(ROCR)
pe <- performance(prediction, "tpr", "fpr")
prediction<-predict(logitmodel,newdata=Rtestset[,-1],type="response")
pe <- performance(prediction, "tpr", "fpr")
prediction<-predict(logitmodel,newdata=Rtestset[,-1],type="response")
predictions1<-predict(logitmodel,newdata=Rtestset[,-1],type="response")
preds<-prediction(predictions1,labels)
preds<-prediction(predictions1)
summary(tuned)
summary(model)
sprediction<-predict(model,testset[,-1])
summary(sprediction)
test1 <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/test1.csv", header=FALSE)
View(test1)
test1 <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/test1.csv")
View(test1)
sprediction<-predict(model,tes1[,-1])
sprediction<-predict(model,tes11[,-1])
sprediction<-predict(model,test1[,-1])
summary(sprediction)
test1 <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/test1.csv")
View(test1)
sprediction<-predict(model,test1[,-1])
summary(sprediction)
install.packages("gtk")
plot(Bankrupt.~)
plot(Bankrupt)
plot(dataset$Bankrupt)
attach(dataset)
plot(Bankrupt, main="Scatter Plot"pch=19)
plot(Bankrupt, main="Scatter Plot",pch=19)
plot(Bankrupt, main="Scatter Plot",ylab="1:Healthy 2: Bankrupt",xlab="Data Values",pch=19)
library(rattle)
rattle()
library(rattle)
rattle()
attach(dataset)
summary(fit)
fancyRpartPlot(fit)
plotcp(fit)
librarY(rpart)
library(rpart)
plotcp(fit)
printcp(fit)
printcp(fit)
library(caret)
corrgram(trainset)
corrgram(dataset, order=TRUE, lower.panel=panel.shade,upper.panel=panel.pie, text.panel=panel.txt,main="Correlation Plot of Bankruptcy Dataset")
library(corrgram)
corrgram(dataset, order=TRUE, lower.panel=panel.shade,upper.panel=panel.pie, text.panel=panel.txt,main="Correlation Plot of Bankruptcy Dataset")
summary(logitmodel)
library(rattle)
rattle()
library(rattle)
rattle()
Rdataset3stars <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/Finale/RegressionDatasetwith3Starsvars.csv")
View(Rdataset3stars)
set.seed(42)
R3starsindex<1:nrow(Rdataset3stars)
R3starsindex<-1:nrow(Rdataset3stars)
R3starstestindex<-sample(R3starsindex,trunc(length(R3starsindex)*0.3))
R3starstestset<-Rdataset3stars[R3starstestindex,]
R3starstrainset<-Rdataset3stars[-R3starstestindex,]
logitmodel3stars<-glm(formula=Bankrupt~.,data=R3starstrainset,family=binomial(link="logit"))
summary(logitmodel3stars)
anova(logitmodel3stars)
names(Rdataset3stars)
summary(logitmodel)
anova(logitmodel)
set.seed(42)
RegressionDatasetwith1.3stars <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/Finale/RegressionDatasetwith1-3stars.csv")
View(RegressionDatasetwith1.3stars)
View(dataset)
View(Rdataset)
`RDataset1-3stars` <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/Finale/RegressionDatasetwith1-3stars.csv")
View(`RDataset1-3stars`)
R13index<-1:nrow(Rdataset1-3stars)
Rindex1-3stars<-1:nrow(RDataset1-3stars)
Rindex13stars<-1:nrow(RDataset1-3stars)
View(Rdataset)
View(`RDataset1-3stars`)
View(`RDataset1-3stars`)
RDataset13stars <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/Finale/RegressionDatasetwith1-3stars.csv")
View(RDataset13stars)
attach(RDataset13stars)
Rindex13stars<-1:nrow(RDataset13stars)
Rtestindex13stars<-sample(Rindex13atars,trunc(length(Rindex13stars)*0.3))
Rtestindex13stars<-sample(Rindex13stars,trunc(length(Rindex13stars)*0.3))
Rtestset13stars<-RDataset13stars[Rtestindex13stars,]
Rtrainset13stars<-Rdataset13stars[-Rtestindex13stars,]
Rtrainset13stars<-RDataset13stars[-Rtestindex13stars,]
logitmodel13stars<-glm(formula=Bankrupt~.,data=Rtrainset13stars,family=binomial(link="logit"))
summary(logitmodel13stars)
anova(logitmodel13stars)
anova(logitmodel3stars)
anova(logitmodel)
library(rattle)
rattle()
summary(logitmodel3stars)
library(rattle)
rattle()
rattle()
rattle()
prediction13stars<-predict(logitmodel13,Rtestset13stars[,-1])
prediction13stars<-predict(logitmodel13stars,Rtestset13stars[,-1])
tab<-table(pred=prediction13stars,actual=Rtestset13stars[,1])
library(caret)
confusionMatrix(tab)
RegressionDatasetwith1.3stars <- read.csv("D:/DataScience/Presentation/Bankruptcy/Final Prediction/Finale/RegressionDatasetwith1-3stars.csv")
View(RegressionDatasetwith1.3stars)
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("Class", "Industrial Risk", "Management Risk", "Financial Flexibility", "Credibility", "Competiteveness", "Operating Risk"),
"Values" = list( list( "0", "0", "0", "0", "0", "0", "0" ),  list( "0", "0", "0", "0", "0", "0", "0" )  )
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://asiasoutheast.services.azureml.net/workspaces/c782721eac8647f8bc2cae5f31a0fbbd/services/9765e5ed74d74c90818bff1bf24f0ff5/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("Class", "Industrial Risk", "Management Risk", "Financial Flexibility", "Credibility", "Competiteveness", "Operating Risk"),
"Values" = list( list( "0", "0", "0", "0", "0", "0", "0" ),  list( "0", "0", "0", "0", "0", "0", "0" )  )
)                ),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "m5El+P17bHOYmj7pFHnzjbDIuAjwWOnZ88uW9yIsi4YkNLeZA/jUTVzybYTDUi0ErhWCPHgDlmEpMcnYaxP+rg==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://asiasoutheast.services.azureml.net/workspaces/c782721eac8647f8bc2cae5f31a0fbbd/services/9765e5ed74d74c90818bff1bf24f0ff5/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
install.packages("RCurl")
install.packages("rjson")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h <- basicTextGatherer()
hdr <- basicHeaderGatherer()
library(rattle)
rattle()
load("D:/Spring 2016/DS_Lab/Santander Customer Satisfaction/R Work/.RData")
